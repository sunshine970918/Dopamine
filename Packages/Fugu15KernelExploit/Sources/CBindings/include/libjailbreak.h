#define LIBJAILBREAK_PATH "/var/jb/basebin/libjailbreak.dylib"

#include <dlfcn.h>

__attribute__((unused))
static void jbdGetStatus(uint64_t *PPLRWStatus, uint64_t *kcallStatus, pid_t *pid)
{
	static void (*impl_jbdGetStatus)(uint64_t *, uint64_t *, pid_t *);
	if(!impl_jbdGetStatus)
	{
		void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
		impl_jbdGetStatus = (void (*)(uint64_t *, uint64_t *, pid_t *))dlsym(handle, "jbdGetStatus");
	}
	if(impl_jbdGetStatus)
	{
		impl_jbdGetStatus(PPLRWStatus, kcallStatus, pid);
	}
}

__attribute__((unused))
static void jbdTransferPPLRW(uint64_t magicPage)
{
	static void (*impl_jbdTransferPPLRW)(uint64_t);
	if(!impl_jbdTransferPPLRW)
	{
		void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
		impl_jbdTransferPPLRW = (void (*)(uint64_t))dlsym(handle, "jbdTransferPPLRW");
	}
	if(impl_jbdTransferPPLRW)
	{
		impl_jbdTransferPPLRW(magicPage);
	}
}

__attribute__((unused))
static uint64_t jbdTransferKcall(void)
{
	static uint64_t (*impl_jbdTransferKcall)(void);
	if(!impl_jbdTransferKcall)
	{
		void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
		impl_jbdTransferKcall = (uint64_t (*)(void))dlsym(handle, "jbdTransferKcall");
	}
	if(impl_jbdTransferKcall)
	{
		return impl_jbdTransferKcall();
	}
}

__attribute__((unused))
static void jbdFinalizeKcall(void)
{
	static void (*impl_jbdFinalizeKcall)(void);
	if(!impl_jbdFinalizeKcall)
	{
		void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
		impl_jbdFinalizeKcall = (void (*)(void))dlsym(handle, "jbdFinalizeKcall");
	}
	if(impl_jbdFinalizeKcall)
	{
		impl_jbdFinalizeKcall();
	}
}

__attribute__((unused))
static int64_t jbdInitEnvironment(NSDictionary *settings)
{
	static int64_t (*impl_jbdInitEnvironment)(NSDictionary *);
	if(!impl_jbdInitEnvironment)
	{
		void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
		impl_jbdInitEnvironment = (int64_t (*)(NSDictionary *))dlsym(handle, "jbdInitEnvironment");
	}
	if(impl_jbdInitEnvironment)
	{
		impl_jbdInitEnvironment(settings);
	}
}

__attribute__((unused))
static int64_t jbdRebuildTrustCache(void)
{
	static int64_t (*impl_jbdRebuildTrustCache)(void);
	if(!impl_jbdRebuildTrustCache)
	{
		void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
		impl_jbdRebuildTrustCache = (int64_t (*)(void))dlsym(handle, "jbdRebuildTrustCache");
	}
	if(impl_jbdRebuildTrustCache)
	{
		impl_jbdRebuildTrustCache();
	}
}
__attribute__((unused)) static void jbdUpdateBindMount(void) {
  static void (*impl_jbdUpdateBindMount)(void);
  if (!impl_jbdUpdateBindMount) {
    void* handle = dlopen(LIBJAILBREAK_PATH, RTLD_LAZY);
    impl_jbdUpdateBindMount = (void (*)(void))dlsym(handle, "jbdUpdateBindMount");
  }
  if (impl_jbdUpdateBindMount) {
    impl_jbdUpdateBindMount();
  }
}
